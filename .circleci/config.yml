---
version: 2.1
jobs:
  test:
    docker:
      - image: circleci/python:3.7
    working_directory: ~/BSAFE
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |  # use pipenv to install dependencies
            sudo pip install pipenv
            pipenv install --dev
      - run:
          name: Run Tests
          command: pipenv run python -m pytest -v -n32 tests/
      - persist_to_workspace:
          root: ~/BSAFE
          paths:
            - .
      - store_test_results:
          path: test-results


  build_image_and_deploy_staging:
    docker:
      - image: circleci/python:3.7

    working_directory: ~/BSAFE

    steps:

      - attach_workspace:
          at: ~/BSAFE

      - run:
          name: Install awscli and gettext-base
          command: |
            sudo pip3 install awscli
            sudo apt-get install -y gettext-base
      - run:
          name: Install aws-iam-authenticator
          command: |
            curl -o aws-iam-authenticator curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/aws-iam-authenticator
            chmod +x ./aws-iam-authenticator
            sudo mv ./aws-iam-authenticator /usr/local/bin/aws-iam-authenticator
      - run:
          name: Install kubectl
          command: |
            curl -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl

      - setup_remote_docker

      - run:
          name: Login to repository and build docker image
          command: |
            eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
            docker build -t ${AWS_REPOSITORY_URL}/${REPOSITORY_NAME}:${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM} .
            docker push ${AWS_REPOSITORY_URL}/${REPOSITORY_NAME}:${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}
      - run:
          name: Prepare K8S templates
          command: |
            aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $CLUSTER_NAME
            rm -rf .k8s/.generated && mkdir -p .k8s/.generated
            for f in .k8s/templates/staging.yml
              do
              envsubst < $f > ".k8s/.generated/$(basename $f)"
            done
      - run:
           name: Deploy
           command: |
             kubectl apply -f .k8s/.generated/ --validate=true
             kubectl get pod -n ${STG_NAMESPACE}

  updatebot:
    docker:
      - image: circleci/openjdk:latest

    working_directory: ~/BSAFE

    steps:
      - attach_workspace:
          at: ~/BSAFE

      - run:
          name: updatebot install
          command: |
            export UPDATEBOT_VERSION=1.1.53
            echo $HOME
            mkdir $HOME/tmp || echo "Try to create tmp"
            curl -Ls -o $HOME/tmp/updatebot.jar   https://repo1.maven.org/maven2/io/jenkins/updatebot/updatebot/${UPDATEBOT_VERSION}/updatebot-${UPDATEBOT_VERSION}.jar
            sudo cp $HOME/tmp/updatebot.jar  /usr/bin/updatebot.jar
            echo "java -jar /usr/bin/updatebot.jar \$@" > $HOME/tmp/updatebot
            sudo cp $HOME/tmp/updatebot  /usr/bin/updatebot
            sudo chmod a+x /usr/bin/updatebot
            echo -e "https://${GH_USER}:${GH_TOKEN}@github.com" >>  ~/.git-credentials
       
      - run:
          name: updatebot run
          command: |
            echo updatebot push-regex -r "\s+image:.*:(.*)" -v  ${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM} --previous-line "bsafe:" "**/values.yaml"
            updatebot push-regex -r "\s+image:.*:(.*)" -v  ${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM} --previous-line "bsafe:" "**/values.yaml"
  
  build_image_and_deploy_prod:
    docker:
      - image: circleci/python:3.7

    working_directory: ~/BSAFE

    steps:

      - checkout

      - run:
          name: Install awscli and gettext-base
          command: |
            sudo pip3 install awscli
            sudo apt-get install -y gettext-base
      - run:
          name: Install aws-iam-authenticator
          command: |
            curl -o aws-iam-authenticator curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/aws-iam-authenticator
            chmod +x ./aws-iam-authenticator
            sudo mv ./aws-iam-authenticator /usr/local/bin/aws-iam-authenticator
      - run:
          name: Install kubectl
          command: |
            curl -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl

      - setup_remote_docker

      - run:
          name: Login to repository and build docker image
          command: |
            eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
            docker build -t ${AWS_REPOSITORY_URL}/${REPOSITORY_NAME}:${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM} .
            docker push ${AWS_REPOSITORY_URL}/${REPOSITORY_NAME}:${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}
      - run:
          name: Prepare K8S templates
          command: |
            aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $CLUSTER_NAME
            rm -rf .k8s/.generated && mkdir -p .k8s/.generated
            for f in .k8s/templates/production.yml
              do
              envsubst < $f > ".k8s/.generated/$(basename $f)"
            done
      - run:
           name: Deploy
           command: |
             kubectl apply -f .k8s/.generated/ --validate=true
             kubectl get pod -n ${PROD_NAMESPACE}

  build_image_and_deploy_prod_jbs:
    docker:
      - image: circleci/python:3.7

    working_directory: ~/BSAFE

    steps:

      - checkout

      - run:
          name: Install awscli and gettext-base
          command: |
            sudo pip3 install awscli
            sudo apt-get install -y gettext-base
      - run:
          name: Install aws-iam-authenticator
          command: |
            curl -o aws-iam-authenticator curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/aws-iam-authenticator
            chmod +x ./aws-iam-authenticator
            sudo mv ./aws-iam-authenticator /usr/local/bin/aws-iam-authenticator
      - run:
          name: Install kubectl
          command: |
            curl -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl

      - setup_remote_docker

      - run:
          name: Login to repository and build docker image
          command: |
            eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
            docker build -t ${AWS_REPOSITORY_URL}/${REPOSITORY_NAME}:${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM} .
            docker push ${AWS_REPOSITORY_URL}/${REPOSITORY_NAME}:${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}
      - run:
          name: Prepare K8S templates
          command: |
            aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $CLUSTER_NAME
            rm -rf .k8s/.generated && mkdir -p .k8s/.generated
            for f in .k8s/templates/jbs-production.yml
              do
              envsubst < $f > ".k8s/.generated/$(basename $f)"
            done
      - run:
           name: Deploy
           command: |
             kubectl apply -f .k8s/.generated/ --validate=true
             kubectl get pod -n jbs-production

  build_image_and_deploy_prod_tyson:
    docker:
      - image: circleci/python:3.7

    working_directory: ~/BSAFE

    steps:

      - checkout

      - run:
          name: Install awscli and gettext-base
          command: |
            sudo pip3 install awscli
            sudo apt-get install -y gettext-base
      - run:
          name: Install aws-iam-authenticator
          command: |
            curl -o aws-iam-authenticator curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/aws-iam-authenticator
            chmod +x ./aws-iam-authenticator
            sudo mv ./aws-iam-authenticator /usr/local/bin/aws-iam-authenticator
      - run:
          name: Install kubectl
          command: |
            curl -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl

      - setup_remote_docker

      - run:
          name: Login to repository and build docker image
          command: |
            eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
            docker build -t ${AWS_REPOSITORY_URL}/${REPOSITORY_NAME}:${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM} .
            docker push ${AWS_REPOSITORY_URL}/${REPOSITORY_NAME}:${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}
      - run:
          name: Prepare K8S templates
          command: |
            aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $CLUSTER_NAME
            rm -rf .k8s/.generated && mkdir -p .k8s/.generated
            for f in .k8s/templates/tyson-production.yml
              do
              envsubst < $f > ".k8s/.generated/$(basename $f)"
            done
      - run:
           name: Deploy
           command: |
             kubectl apply -f .k8s/.generated/ --validate=true
             kubectl get pod -n tyson-production

workflows:
  build-test-and-deploy:
    jobs:
      - test
      - build_image_and_deploy_staging:
          requires:
            - test
          filters:
            branches:
              only:
                - master
                - master-fix
      - updatebot:
          requires:
            - build_image_and_deploy_staging
          filters:
            branches:
              only:
                - master
                - master-fix

      - build_image_and_deploy_prod:
          requires:
            - test
          filters:
            branches:
              only:
                - production
      - build_image_and_deploy_prod_jbs:
          requires:
            - test
          filters:
            branches:
              only:
                - jbs-production
      - build_image_and_deploy_prod_tyson:
          requires:
            - test
          filters:
            branches:
              only:
                - tyson-production
